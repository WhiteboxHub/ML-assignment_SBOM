from fastapi import FastAPI, HTTPException, status
import requests
import json
import time
import logging
from pydantic import BaseModel
import os

app = FastAPI()

class CPERequest(BaseModel):
    cpe: str

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Load NVD API key from environment variable
NVD_API_KEY = os.getenv('NVD_API_KEY')

@app.post("/getVulnerability")
def read_item(request: CPERequest):
    try:
        response = main(request.cpe)
        return response
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Internal server error"
        )

def load_sbom(file_path):
    """Load the SBOM from a JSON file"""
    try:
        with open(file_path, 'r') as file:
            sbom = json.load(file)
        return sbom
    except (IOError, json.JSONDecodeError) as e:
        logging.error(f"Error loading SBOM file: {e}")
        return {}

def get_vulnerabilities_from_nvd(cpe_name):
    """Query the NVD API for vulnerabilities using CPE name."""
    
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName={cpe_name}"
    
    headers = {
        'apiKey': NVD_API_KEY
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()  # Raise an HTTPError for bad responses
        print('GetVulnerabilities execution completed')
        return response.json().get('vulnerabilities', [])
    except requests.RequestException as e:
        print('Error in get_vulnerabilities_from_nvd:', e)
        return []

def check_vulnerabilities(cpe):
    """Check the SBOM dependencies for known vulnerabilities."""
    
    vulnerabilities_info = {}
    logging.info(f"Checking vulnerabilities for {cpe}...")
    cve_list = get_vulnerabilities_from_nvd(cpe)
    time.sleep(1)  # Rate limit to avoid hitting API limits
    vulnerabilities = cve_list
    vulnerabilities_info['vulnerabilities'] = []
    for vulnerability in vulnerabilities:
        cve_info = vulnerability.get('cve', {})
        cve_id = cve_info.get('id', 'Unknown')
        cve_description = cve_info.get('descriptions', [{}])[0].get('value', 'No description available')
        metrics = cve_info.get('metrics', {})
        cvss_metric_v2 = metrics.get('cvssMetricV2', metrics.get('cvssMetricV31', [{}]))[0]
        cvss_score = cvss_metric_v2.get('cvssData', {}).get('baseScore', 'N/A')
        cve_exploitabilityScore = cvss_metric_v2.get('exploitabilityScore')
        cve_impactScore = cvss_metric_v2.get('impactScore')
        vulnerabilities_info['vulnerabilities'].append({
            'CVE ID': cve_id,
            'Description': cve_description,
            'CVSS Score': cvss_score,
            'cve_impactScore': cve_impactScore,
            'cve_exploitabilityScore': cve_exploitabilityScore
        })

    return vulnerabilities_info

def main(cpe):
    # Check vulnerabilities
    vulnerabilities = check_vulnerabilities(cpe)
    return vulnerabilities
