import requests
import json
import time
import logging
from collections import defaultdict

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


def load_sbom(file_path):

    """"Load the SBOM from a JSON file"""
    try:
        with open(file_path,'r') as file:
            sbom = json.load(file)
        return sbom
    
    except (IOError,json.JSONDecodeError) as e:
        logging.error(f"Error loading SBOM file: {e}")
        return {}
    
def get_vulnerabilities_from_nvd(cpe_name,name):
    """Query the NVD API for vulnerabilities using CPE name."""

    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName={cpe_name}"
   

    try:
       
        response = requests.get(url)
        response.raise_for_status()  # Raise an HTTPError for bad responses
        with open(f'{name}.json', 'w') as json_file:
            json.dump(response.json(), json_file, indent=4)  # indent=4 for pretty printing
        print(f"Data saved to {name}.json")
        
        return response.json().get('vulnerabilities', [])
    except requests.RequestException as e:
        # logging.error(f"Error fetching data from NVD: {e}")
        print('error in get_vulnerabilities_from_nvd', e)
        return []
    

def check_vulnerabilities(sbom):
    """Check the SBOM dependencies for known vulnerabilities."""

    vulnerabilities_info = {}
    for component in sbom.get('components',[]):
        cpe_name = component.get('cpe','')
        print(component.get('name'))
        # if not cpe_name:
        #     continue # Skip if no CPE is provided for the component
        
        logging.info(f"Checking vulnerabilities for {component['name']}...")
        cve_list = get_vulnerabilities_from_nvd(cpe_name,component['name'])
        time.sleep(1)  # Rate limit to avoid hitting API limits
        vulnerabilities = cve_list
        vulnerabilities_info[component['name']] = []
        for vulnerabilitie in vulnerabilities:
            cve_info = vulnerabilitie.get('cve', {})
            cve_id = cve_info.get('id', 'Unknown')
            cve_description = cve_info.get('descriptions', [{}])[0].get('value', 'No description available')
            metrics = cve_info.get('metrics', {})
            cvss_metric_v2 = metrics.get('cvssMetricV2', metrics.get('cvssMetricV31',[{}]))[0]
            cvss_score = cvss_metric_v2.get('cvssData', {}).get('baseScore', 'N/A')
            cve_exploitabilityScore = cvss_metric_v2.get('exploitabilityScore')
            cve_impactScore = cvss_metric_v2.get('impactScore')
            vulnerabilities_info[component.get('name')].append({
                'CVE ID': cve_id,
                'Description': cve_description,
                'CVSS Score': cvss_score,
                'cve_impactScore':cve_impactScore,
                'cve_exploitabilityScore':cve_exploitabilityScore
            })
        
        with open(f"{component['name']}cve.json",mode='w') as json_file:
            json.dump(vulnerabilities_info,json_file,indent=4)


    return vulnerabilities_info


def display_vulnerabilities(vulnerabilities):
    """Display the vulnerabilities found in a readable format."""
    for  cves in vulnerabilities.items():
        # logging.info(f"\nVulnerabilities for {component}:")
        for cve in cves:
            for i in cve:
                print(i)
                print('\n')

def main():
    # Load the SBOM JSON file
    sbom_file_path = 'Vulenrability_test.json'  # Replace with your SBOM file path
    sbom = load_sbom(sbom_file_path)

    # Check vulnerabilities
    vulnerabilities = check_vulnerabilities(sbom)

    # Display results
    display_vulnerabilities(vulnerabilities)


if __name__ == "__main__":
    main()