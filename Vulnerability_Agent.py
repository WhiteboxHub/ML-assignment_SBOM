import requests
import json
import time
import logging


# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


def load_sbom(file_path):

    """"Load the SBOM from a JSON file"""
    try:
        with open(file_path,'r') as file:
            sbom = json.load(file)
        return sbom
    
    except (IOError,json.JSONDecodeError) as e:
        logging.error(f"Error loading SBOM file: {e}")
        return {}
    
def get_vulnerabilities_from_nvd(cpe_name,name):
    """Query the NVD API for vulnerabilities using CPE name."""

    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName={cpe_name}"
   

    try:
       
        response = requests.get(url)
        response.raise_for_status()  # Raise an HTTPError for bad responses
        with open(f'{name}.json', 'w') as json_file:
            json.dump(response.json(), json_file, indent=4)  # indent=4 for pretty printing
        print(f"Data saved to {name}.json")
        return response.json().get('result', {}).get('CVE_Items', [])
    except requests.RequestException as e:
        # logging.error(f"Error fetching data from NVD: {e}")
        print('error in get_vulnerabilities_from_nvd', e)
        return []
    

def check_vulnerabilities(sbom):
    """Check the SBOM dependencies for known vulnerabilities."""

    vulnerabilities = {}

    for component in sbom.get('components',[]):
        cpe_name = component.get('cpe','')

        if not cpe_name:
            continue # Skip if no CPE is provided for the component
        
        logging.info(f"Checking vulnerabilities for {component['name']}...")
        cve_list = get_vulnerabilities_from_nvd(cpe_name,component['name'])
        time.sleep(1)  # Rate limit to avoid hitting API limits

        if cve_list:
            vulnerabilities[component['name']] = []
            for cve in cve_list:
                cve_id = cve.get('cve', {}).get('CVE_data_meta', {}).get('ID', 'N/A')
                description = cve.get('cve', {}).get('description', {}).get('description_data', [{}])[0].get('value', 'No description available.')
                cvss_score = cve.get('impact', {}).get('baseMetricV3', {}).get('cvssV3', {}).get('baseScore', 'N/A')

                vulnerabilities[component['name']].append({
                    'CVE ID': cve_id,
                    'Description': description,
                    'CVSS Score': cvss_score
                })
                print(vulnerabilities[component['name']].append({
                    'CVE ID': cve_id,
                    'Description': description,
                    'CVSS Score': cvss_score
                }))

    return vulnerabilities


def display_vulnerabilities(vulnerabilities):
    """Display the vulnerabilities found in a readable format."""
    for component, cves in vulnerabilities.items():
        logging.info(f"\nVulnerabilities for {component}:")
        for cve in cves:
            logging.info(f"  CVE ID: {cve['CVE ID']}")
            logging.info(f"  Description: {cve['Description']}")
            logging.info(f"  CVSS Score: {cve['CVSS Score']}")
            logging.info("-" * 50)

def main():
    # Load the SBOM JSON file
    sbom_file_path = 'Vulenrability_test.json'  # Replace with your SBOM file path
    sbom = load_sbom(sbom_file_path)

    # Check vulnerabilities
    vulnerabilities = check_vulnerabilities(sbom)

    # Display results
    display_vulnerabilities(vulnerabilities)


if __name__ == "__main__":
    main()